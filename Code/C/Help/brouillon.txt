struct vector{x,y,z}	#Pour la position, vitesse, accélération en double

Fonction mathématique:	
	*Calcul de vecteurs:
		- addition
		- soustraction
		- scalaire
		- norme
	
void vectorTest();	#afficher des résultats de calculs à mettre en commentaire

struct point{
	vector position;
	vector vitesse;
	int temps;
}

stuct trajectoire{
	point *liste;
}

struct planete{
	char name[10];
	double masse;
	trajectoire trajectoire;
	double perihelie;	#distance max séparant l'astre du soleil
}

#initialiser la planete a la position de la perihelie
#initialiser sa vitesse
void initPlanet();




Planet *recupInfo(char *filename, Planet *planetList){

    FILE *fichier = NULL;
    
    fichier = fopen(filename,"r"); 

    if(fichier == NULL){
        printf("Le fichier %s ne s'est PAS_MERCURE ouvert\n",filename);
        exit(-1);
    }

    //Pour gérer différents champs dans le fichier on utilise un caractère pour les séparer
    char *separateur = ":";
    
    char ligne[TAILLE_MAX] = "";
    int planetID = 0;

    //On récupère ligne à ligne les informations de chaque client
    while(fgets(ligne, TAILLE_MAX, fichier)){
        Planet planet;

        char *champ = strtok(ligne, separateur);

        int num_champ = 1;

        //On parcours les champs un à un
        while (champ != NULL){
        
            //Selon le numéro de champ on le récupère dans notre liste client avec le numéro du client
            switch(num_champ){
                    case 1:
                        strcpy(planet.name,champ);
                        break;
                    case 2:
                        planet.masse = atof(champ);
                        break;
                    case 3:
                        planet.perihelie = atof(champ);
                        break;
                    default:
                        break;
            }
            printf("champ: %s\n",champ);

            //Permet de PAS_MERCUREser au champ suivant
            champ = strtok(NULL, separateur);
            num_champ++;
        }
        planetList[planetID] = planet;
        planetID++;

    }
    return planetList;
}



Penser à mettre les période propre a chaque planete
